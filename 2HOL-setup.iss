; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define AppName "Two Hours One Life"
#define AppPublisher "Two Hours One Life Community"
#define AppComments "Online Society Building, Cooperation and Parenting"
#define AppCopyright "Public Domain"
#define WebsiteURL "https://twohoursonelife.com/"
#define DiscordURL "https://discord.gg/twohoursonelife"
#define TwoTechURL "https://twotech.twohoursonelife.com"
#define MainExeName "OneLife.exe"
#define MainFolder "2HOL"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{7E08BD66-E46B-485D-A8B0-1C9E98B3E23D}
AppName={#AppName}
AppVerName={#AppName}
AppPublisher={#AppPublisher}
AppComments={#AppComments}
AppPublisherURL={#WebsiteURL}
AppSupportURL={#DiscordURL}
AppCopyright={#AppCopyright}
CreateAppDir=yes
DefaultDirName={localappdata}\{#MainFolder}
DefaultGroupName={#MainFolder}
DisableDirPage=no
; Game will run on both x64 and x86 systems so just comment this and it defaults to what we want
; ArchitecturesAllowed=x64compatible
; ArchitecturesInstallIn64BitMode=x64compatible
DisableProgramGroupPage=yes
DisableWelcomePage=no
PrivilegesRequired=lowest
OutputBaseFilename=2HOL-setup
SetupIconFile=icon.ico
UninstallDisplayIcon={app}\icon.ico
UsePreviousAppDir=no
WizardStyle=modern
WizardImageFile=background.bmp
WizardResizable=no


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Code]
#include "JsonParser.pas"

var
  Index: Integer;
  ResultCode: Integer;
  DownloadPage: TDownloadWizardPage;
  ExtractProgressPage: TOutputProgressWizardPage;
  CustomUninstallForm: TSetupForm;
  UninstallShouldStop: Boolean;
  UninstallVersionCheckBoxes: array of TNewCheckBox;
  VersionFolder: String;

function OnDownloadProgress(const Url, FileName: String; const Progress, ProgressMax: Int64): Boolean;
begin
  if Progress = ProgressMax then begin
    Log(Format('Successfully downloaded file to {tmp}: %s', [FileName]));
  end;
  Result := True;
end;

procedure OpenDiscordLink(Sender: TObject);
begin
  ShellExec('open', '{#DiscordURL}', '', '', SW_SHOW, ewNoWait, ResultCode);
end;

procedure InitializeWizard;
var
  SubLabel: TLabel;
  InfoLabel: TLabel;
  DiscordLink: TLabel;
begin
  DownloadPage := CreateDownloadPage(SetupMessage(msgWizardPreparing), SetupMessage(msgPreparingDesc), @OnDownloadProgress);
  ExtractProgressPage := CreateOutputProgressPage('Extracting Game Files', 'Please wait while the game files are extracted...');

  // Title for welcome page
  WizardForm.WelcomeLabel1.Caption := 'Welcome to Two Hours One Life!';
  WizardForm.WelcomeLabel2.Visible := False;

  // Subtitle for welcome page
  SubLabel := TLabel.Create(WizardForm);
  SubLabel.Parent := WizardForm.WelcomePage;
  SubLabel.AutoSize := True;
  SubLabel.WordWrap := True;
  SubLabel.Top := 75;
  SubLabel.Font.Size := 9;
  SubLabel.Font.Style := [fsBold];
  SubLabel.Caption := 'Required steps to play Two Hours One Life:';

  // Instructions in welcome page
  InfoLabel := TLabel.Create(WizardForm);
  InfoLabel.Parent := WizardForm.WelcomePage;
  InfoLabel.AutoSize := True;
  InfoLabel.WordWrap := True;
  InfoLabel.Top := 100;
  InfoLabel.Font.Size := 9;
  InfoLabel.Caption :=
    'â—† Join the Discord server for the game' + #13#10 +
    'â—† Accept the server rules' + #13#10 +
    'â—† A Discord bot will send you your login credentials' + #13#10#13#10 +
    'Missed the message? Just type "/account" in any channel in the server.' + #13#10#13#10 +
    'Note: Youâ€™ll need a Discord account. Click the link to sign up and get started.';

  // Create discord link in welcome page
  DiscordLink := TLabel.Create(WizardForm);
  DiscordLink.Parent := WizardForm.WelcomePage;
  DiscordLink.Caption :=
    'Click to Join the Server for Your Login Info:' + #13#10 +
    '{#DiscordURL}';
  DiscordLink.Alignment := taCenter;
  DiscordLink.AutoSize := True;
  DiscordLink.Cursor := crHand;
  DiscordLink.Font.Color := clNavy;
  DiscordLink.Font.Size := 11;
  DiscordLink.Font.Style := [fsBold];
  DiscordLink.Top := WizardForm.Height - 75;
  DiscordLink.OnClick := @OpenDiscordLink;
end;

function GetJsonRoot(Output: TJsonParserOutput): TJsonObject;
begin
  Result := Output.Objects[0];
end;

function FindJsonValue(Output: TJsonParserOutput; Parent: TJsonObject; Key: TJsonString; var Value: TJsonValue): Boolean;
begin
  for Index := 0 to Length(Parent) - 1 do begin
    if Parent[Index].Key = Key then begin
      Value := Parent[Index].Value;
      Result := True;
      Exit;
    end;
  end;

  Result := False;
end;

function FindJsonString(Output: TJsonParserOutput; Parent: TJsonObject; Key: TJsonString; var Str: TJsonString): Boolean;
var
  JsonValue: TJsonValue;
begin
  Result :=
    FindJsonValue(Output, Parent, Key, JsonValue) and
    (JsonValue.Kind = JVKString);
  if Result then begin
    Str := Output.Strings[JsonValue.Index];
  end;
end;

function ParseJsonAndLogErrors(var JsonParser: TJsonParser; const Source: WideString): Boolean;
begin
  ParseJson(JsonParser, Source);

  Result := (Length(JsonParser.Output.Errors) = 0);
  if not Result then begin
    Log('Error parsing JSON');
    for Index := 0 to Length(JsonParser.Output.Errors) - 1 do begin
      Log(JsonParser.Output.Errors[Index]);
    end;
  end;
end;

function GetExtractProgress(TotalFilesCount: Integer; FolderPath: String): Integer;
var
  NumberOfExtracted: Integer;
  ConsoleOut: TExecOutput;
  Params: String;
  LineNumber: Integer;
begin
  Result := 0;
  NumberOfExtracted := 0;

  // This uses cmd to count how many files were already extracted
  Params := '/C dir /d /b "' + FolderPath + '" | find /c /v ""'
  if ExecAndCaptureOutput('cmd.exe',
      Params,
      '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode, ConsoleOut) then begin
    if not ConsoleOut.Error then begin
      for LineNumber := 0 to GetArrayLength(ConsoleOut.StdOut) - 1 do begin
        NumberOfExtracted := StrToIntDef(ConsoleOut.StdOut[LineNumber], 1);
      end;
    end else begin
      RaiseException('Error while trying to read decompressed file.');
    end;
  end;
  if not (NumberOfExtracted > TotalFilesCount) then begin
    if TotalFilesCount <> 0 then begin
      Result := Round((Double(NumberOfExtracted) / Double(TotalFilesCount)) * 100);
    end;
  end;
  Log('Extracted ' + IntToStr(NumberOfExtracted) + ' Files From ' + IntToStr(TotalFilesCount));
end;

procedure ShowProgressPageAndResolve(ExtractingFrom: String; ExtractingTo: String);
var
  ExtractProgress: Integer;
  TotalFilesCount: Integer;
  ConsoleOut: TExecOutput;
  Params: String;
  LineNumber: Integer;
  StartPos: Integer;
  SubStr: String;
begin
  ExtractProgressPage.Show;
  ExtractProgressPage.SetProgress(0, 100);

  // This uses 7zip and powershell to count how many files the compressed game have
  Params := ' l -bso1 -ba "' + ExtractingFrom + '" -xr!*\*\*';
  if ExecAndCaptureOutput(ExpandConstant('{tmp}\7za.exe'),
    Params,
    '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode, ConsoleOut) then begin
    if not ConsoleOut.Error then begin
      for LineNumber := 0 to Length(ConsoleOut.StdOut) - 1 do begin
        StartPos := Pos('win\', ConsoleOut.StdOut[LineNumber]);
        if StartPos > 0 then begin
          SubStr := Copy(ConsoleOut.StdOut[LineNumber], StartPos + 4, Length(ConsoleOut.StdOut[LineNumber]) - StartPos + 1);
          if not (SubStr = '') then begin
            Inc(TotalFilesCount);
          end;
        end;
      end;
    end else begin
      RaiseException('Error while trying to read compressed file.');
    end;
  end;

  repeat
    ExtractProgress := GetExtractProgress(TotalFilesCount, ExtractingTo);
    Log('Extract progress: ' + IntToStr(ExtractProgress) + '%');
    ExtractProgressPage.SetProgress(ExtractProgress, 100);
  until ExtractProgress >= 100;

  ExtractProgressPage.Hide;
end;

// extracts version number from 2HOL_win_v{NUMBER}.zip
function ExtractVersionNumber(const FileName: String): String;
var
  StartPos, EndPos: Integer;
begin
  Result := '';
  StartPos := Pos('_v', FileName);
  if StartPos = 0 then Exit;

  StartPos := StartPos + 2;
  EndPos := Pos('.zip', FileName);
  if EndPos = 0 then Exit;

  Result := Copy(FileName, StartPos, EndPos - StartPos);
end;

// get either the name of the file for the last release or the link
function GetLastestRelease(Mode: String): String;
var
  JsonParser: TJsonParser;
  JsonValue: TJsonValue;
  AssetsArrayIndex: Integer;
  AssetObj: TJsonObject;
  AssetName, DownloadUrl: TJsonString;
  RawJson: AnsiString;
  ElementIndex: Integer;
begin
  Result := '';  // default if nothing found

  // load & parse JSON
  if not LoadStringFromFile(ExpandConstant('{tmp}\latest.json'), RawJson) then
    RaiseException('Failed to read latest.json');

  if not ParseJsonAndLogErrors(JsonParser, RawJson) then
    RaiseException('JSON parse failed');

  // grab the assets array
  if not FindJsonValue(JsonParser.Output, GetJsonRoot(JsonParser.Output), 'assets', JsonValue) then
    RaiseException('"assets" key not found');
  if JsonValue.Kind <> JVKArray then
    RaiseException('"assets" is not an array');

  AssetsArrayIndex := JsonValue.Index;

  // scan for the right asset
  for ElementIndex := 0 to Length(JsonParser.Output.Arrays[AssetsArrayIndex]) - 1 do
  begin
    JsonValue := JsonParser.Output.Arrays[AssetsArrayIndex][ElementIndex];
    if JsonValue.Kind <> JVKObject then
      Continue;

    AssetObj := JsonParser.Output.Objects[JsonValue.Index];

    if FindJsonString(JsonParser.Output, AssetObj, 'name', AssetName) and
       (Pos('2HOL_win_v', AssetName) > 0) and
       FindJsonString(JsonParser.Output, AssetObj, 'browser_download_url', DownloadUrl) then
    begin
      Log('âœ… Found file: ' + AssetName);
      Log('ðŸ”— URL: ' + DownloadUrl);
      if Mode = 'filename' then begin
        Result := AssetName
      end else
        Result := DownloadUrl;
      Exit;
    end;
  end;

  ClearJsonParser(JsonParser);
end;

function GetInstalledGameVersions(): TArrayOfString;
var
  F: TFindRec;
  R: TArrayOfString;
  CurrentVersion: Integer;
begin
  CurrentVersion := 0;
  if FindFirst(ExpandConstant('{app}\*'), F) then
  try
    repeat
      if (F.Attributes and FILE_ATTRIBUTE_DIRECTORY <> 0) and
         (F.Name <> '.') and (F.Name <> '..') and
         (Pos('2HOL_v', F.Name) = 1) then
      begin
        SetArrayLength(R, CurrentVersion + 1);
        R[CurrentVersion] := F.Name;
        CurrentVersion := CurrentVersion + 1;
      end;
    until not FindNext(F);
  finally
    FindClose(F);
  end;
  Result := R;
end;

// this returns not the installing folder but the inner folder the game binary is located
function ReturnVersionFolder(Param: String): String;
begin
  if VersionFolder = '' then begin
    VersionFolder := '2HOL_v' + ExtractVersionNumber(GetLastestRelease('filename')) + '_win';
  end;
  Result := VersionFolder;
end;

procedure SaveInstalledVersion;
begin
  SaveStringToFile(ExpandConstant('{app}\last_installed.txt'), ReturnVersionFolder(''), False);
end;

function LastInstalledVersion: String;
var
  lastInstalled: AnsiString;
begin
  if LoadStringFromFile(ExpandConstant('{app}\last_installed.txt'), lastInstalled) then begin
    Result := lastInstalled;
  end else
    Result := '';
end;

procedure AddCheckbox(Caption: String; Checked: Boolean; TopPos: Integer);
var
  CheckBox: TNewCheckBox;
begin
  SetLength(UninstallVersionCheckBoxes, Length(UninstallVersionCheckBoxes) + 1);
  CheckBox := TNewCheckBox.Create(CustomUninstallForm);
  CheckBox.Parent := CustomUninstallForm;
  CheckBox.Top := TopPos;
  CheckBox.Left := 50;
  CheckBox.Caption := Caption;
  CheckBox.Width := 150;
  CheckBox.Checked := Checked;
  UninstallVersionCheckBoxes[High(UninstallVersionCheckBoxes)] := CheckBox;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  // will skip folder selection if user is not installing as admin
  if PageID = wpSelectDir then begin
    if not IsAdminInstallMode then begin
      Result := True;
    end;
  end;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  Result := True;
  if CurPageID = wpReady then begin
    CreateDir(ExpandConstant('{app}'));
    
    DownloadPage.Clear;
    DownloadPage.Show;
    
    DownloadPage.Add('https://api.github.com/repos/twohoursonelife/OneLife/releases/latest', 'latest.json', '');
    // Download json with lastest release information
    if DownloadPage.Download < 0 then begin
      RaiseException('Failed to download the release info file.');
      Exit;
    end;

    DownloadPage.Add(GetLastestRelease('link'), '2HOL-latest.zip', '');
    // only download the game if the last installed version is not equal to the lastest version
    if LastInstalledVersion <> ReturnVersionFolder('') then begin
      if FileExists(ExpandConstant('{app}\2HOL-latest.zip')) then begin
        MsgBox('File already downloaded. Check instalation folder and delete files.', mbInformation, MB_OK);
      end else begin
        if DownloadPage.Download < 0 then begin
          RaiseException('Failed to download the latest release.');
          Exit;
        end;
      end;
    end;

    CopyFile(ExpandConstant('{tmp}\2HOL-latest.zip'), ExpandConstant('{app}\2HOL-latest.zip'), False);
    DownloadPage.Hide;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  GameFile: String;
  GameFolder: String;
  Params: String;
  ExtractProgress: Integer;
begin
  if CurStep = ssInstall then
  begin
    GameFile := ExpandConstant('{app}\2HOL-latest.zip');
    GameFolder := ExpandConstant('{app}\') + ReturnVersionFolder('');

    if not FileExists(GameFile) then
    begin
      // if 2HOL-latest.zip doesn't exist it may mean the download was skipped because this version is already installed
      if DirExists(GameFolder) then begin
        MsgBox('Lastest game version already installed.', mbInformation, MB_OK);
      end else
        RaiseException('The game was not properly downloaded. Clear instalation folder.');
      Exit;
    end;

    ExtractTemporaryFile('7za.exe');
    Params := ' -bsp1 x "' + GameFile + '" -o"' + ExpandConstant('{app}') + '" -aos';

    // This runs 7zip extraction asynchronously
    if Exec(ExpandConstant('{tmp}\7za.exe'), Params, '', SW_HIDE, ewNoWait, ResultCode) then
    begin
      Log('Extracting game...');
    end;
    ExtractProgress := 0;

    // This will track progress in real time by comparing files in archive to files in the folder
    ShowProgressPageAndResolve(GameFile, GameFolder);

    SaveInstalledVersion;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  CheckboxIndex: Integer;
  FolderToDelete: String;
begin
  if CurUninstallStep = usPostUninstall then begin
    // find all checkboxes that are checked
    for CheckboxIndex := 0 to GetArrayLength(UninstallVersionCheckBoxes) - 1 do begin
      // VERY IMPORTANT CHECK, PRECEEDS DANGER
      if (UninstallVersionCheckBoxes[CheckboxIndex].Checked = True) and (Pos('2HOL_v', UninstallVersionCheckBoxes[CheckboxIndex].Caption) = 1) then
        // DANGEROUS, DELETE GAME VERSIONS RECURSIVELY
        FolderToDelete := ExpandConstant('{app}\') + UninstallVersionCheckBoxes[CheckboxIndex].Caption;
        if (DirExists(FolderToDelete)) then
        begin
          Log('Deleting: ' + FolderToDelete);
          DelTree(FolderToDelete, True, True, True);
        end;
    end;
  end;
end;

procedure NextFormButtonClick(Sender: TObject);
begin
  UninstallShouldStop := False;
  CustomUninstallForm.Close;
end;

function InitializeUninstall(): Boolean;
var
  GameVersions: TArrayOfString;
  lastIndex: Integer;
  NewLabel: TLabel;
  NextButton: TNewButton;
begin
  Result := True;
  UninstallShouldStop := True;

  CustomUninstallForm := CreateCustomForm;
  CustomUninstallForm.Caption := 'Uninstall Game Versions';
  CustomUninstallForm.Width := 300;
  CustomUninstallForm.Height := 150;
  CustomUninstallForm.Position := poScreenCenter;

  NewLabel := TLabel.Create(CustomUninstallForm);
  NewLabel.Parent := CustomUninstallForm;
  NewLabel.Caption := 'Choose the versions you wish to uninstall:';
  NewLabel.Top := 10;
  NewLabel.Left := 40;

  GameVersions := GetInstalledGameVersions();
  for lastIndex := 0 to GetArrayLength(GameVersions) - 1 do begin
    // add checkboxes one below another
    AddCheckbox(GameVersions[lastIndex], True, 35 + (lastIndex*20));
  end;
  //dinamically change the window height depending on the number of elements
  CustomUninstallForm.Height := CustomUninstallForm.Height + (lastIndex*20) - 20;

  NextButton := TNewButton.Create(CustomUninstallForm);
  NextButton.Parent := CustomUninstallForm;
  NextButton.Caption := 'Next';
  NextButton.Top := 50 + (lastIndex*20);
  NextButton.Width := 100;
  NextButton.Left := (CustomUninstallForm.ClientWidth - NextButton.Width) div 2;
  NextButton.OnClick := @NextFormButtonClick;

  CustomUninstallForm.ShowModal; // This doesn't resolve until NextButton is clicked

  if UninstallShouldStop then begin
    Result := False;
  end;
end;

[Files]
; Temporary Files
;Source: "{app}\2HOL-latest.zip"; DestDir: "{app}"; Flags: external deleteafterinstall
Source: "{tmp}\latest.json"; DestDir: "{tmp}"; Flags: external deleteafterinstall
Source: "7zip\7za.exe"; DestDir: "{tmp}"; Flags: dontcopy
Source: "background.bmp"; DestDir: "{tmp}"; Flags: dontcopy
; Permanent Files
Source: "icon.ico"; DestDir: "{app}"
Source: "inverted.ico"; DestDir: "{app}"
Source: "twotech.ico"; DestDir: "{app}"

[UninstallDelete]
; If this file is deleted it will override on next installation if set on same folder
Type: files; Name: "{app}\last_installed.txt"

[Icons]
Name: "{autodesktop}\{#AppName}"; Filename: "{app}\{code:ReturnVersionFolder}\{#MainExeName}"; IconFilename: "{app}\icon.ico"; Comment: "Play Two Hours One Life"
Name: "{autodesktop}\TwoTech - Crafting Reference"; Filename: "{#TwoTechURL}"; IconFilename: "{app}\twotech.ico"; Comment: "Learn how to craft every item in 2HOL"
Name: "{group}\{#AppName}"; Filename: "{app}\{code:ReturnVersionFolder}\{#MainExeName}"; IconFilename: "{app}\icon.ico"; Comment: "Play Two Hours One Life"
Name: "{group}\Uninstall {#AppName}"; Filename: "{uninstallexe}"; IconFilename: "{app}\inverted.ico"

[Run]
Filename: "{#WebsiteURL}"; Flags: shellexec postinstall runmaximized unchecked; Description: "Open 2HOL's Website"
Filename: "{#DiscordURL}"; Flags: shellexec postinstall runmaximized unchecked; Description: "Open Discord Server for account info and help"
Filename: "{app}\{code:ReturnVersionFolder}\{#MainExeName}"; Description: "{cm:LaunchProgram,{#StringChange('Two Hours One Life', '&', '&&')}}"; Flags: nowait postinstall skipifsilent
